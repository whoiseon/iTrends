/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * iTrends API
 * [openapi.json](/api/swagger)
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import { customInstance } from '../mutator';
import type { ErrorType , BodyType } from '../mutator';

export type PostAuthSignupBody = {
  /** The email address of the user */
  email: string;
  /** The password of the user */
  password: string;
  /** The display name of the user */
  displayName: string;
};

export type PostAuthSignup200Payload = {
  /** Whether the user was registered successfully */
  registered?: boolean;
};

export type PostAuthSignup200 = {
  /** The status code of the response */
  statusCode?: number;
  /** The message from the server */
  message?: string;
  payload?: PostAuthSignup200Payload;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Sign up for a new user
 * @summary Sign up
 */
export const postAuthSignup = (
    postAuthSignupBody: BodyType<PostAuthSignupBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostAuthSignup200>(
      {url: `/auth/signup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAuthSignupBody, signal
    },
      options);
    }
  


export const getPostAuthSignupMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignup>>, TError,{data: BodyType<PostAuthSignupBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthSignup>>, TError,{data: BodyType<PostAuthSignupBody>}, TContext> => {
    
const mutationKey = ['postAuthSignup'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthSignup>>, {data: BodyType<PostAuthSignupBody>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthSignup(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthSignupMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthSignup>>>
    export type PostAuthSignupMutationBody = BodyType<PostAuthSignupBody>
    export type PostAuthSignupMutationError = ErrorType<unknown>

    /**
 * @summary Sign up
 */
export const usePostAuthSignup = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignup>>, TError,{data: BodyType<PostAuthSignupBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthSignup>>,
        TError,
        {data: BodyType<PostAuthSignupBody>},
        TContext
      > => {

      const mutationOptions = getPostAuthSignupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
